{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","_SeriesWrapper","_editor","_libLoader","_anno","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","annotationsSrv","_this","this","annotations","AnnoInfo","seriesByKey","Map","seriesHash","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","layout","width","height","innerHeight","redraw","event_1","CustomEvent","detail","frameElement","id","parent","document","dispatchEvent","err","console","log","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","_hadAnno","initialized","defaultsDeep","defaults","cfg","pconfig","traces","a","events","loadPlotly","then","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","idx","length","rules","cssRules","ruleIdx","rule","series","clear","render","otherPanelInFullscreenMode","event_2","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","configVersion","onPanelInitialized","_updateTraceData","getProcessedLayout","xaxis","yaxis","fixScale","scaleanchor","b","pad","type","mapping","isDate","title","range","timeSrv","timeRange","from","valueOf","to","font","color","gridcolor","yaxis2","event_3","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","shapes","concat","emit","react","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","found","fullData","Math","utc","setTime","Plots","purge","innerHTML","snapshot","dataList","finfo","useRefID_1","targets","sidx","refId","String","fromCharCode","charCodeAt","columns","push","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","annotationPromise","Promise","resolve","showAnnotations","getAnnotations","results","hasAnno","update","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","tconfig","config","createTraceName","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","force","zero","vals","toArray","Array","loadIfNecessary","res","event_4","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","size","dash","shape","symbol","visible","loadFromCDN","showlegend","legend","orientation","dragmode","hovermode","family","showgrid","zeroline","rangemode","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","table","rows","index","col","Error","row","u","_module","REMOVE_KEY","axis","defaultMappings","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","_scriptjs2","isFull","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","h","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","assign","arguments","apply","hoverinfo","annotation","iconColor","xref","yref","x0","y0","x1","y1","layer","fillcolor","opacity"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport {EditorHelper} from './editor';\n\nimport {loadPlotly, loadIfNecessary} from './libLoader';\nimport {AnnoInfo} from './anno';\nimport {Axis} from 'plotly.js';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#93a8b3',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#93a8b3',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#93a8b3',\n          width: 0,\n        },\n        showscale: false,\n      },\n      color_option: 'ramp',\n    },\n  };\n\n  static yaxis2: Partial<Axis> = {\n    title: 'Annotations',\n    type: 'linear',\n    range: [0, 1],\n    visible: false,\n  };\n\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      showAnnotations: true,\n      fixScale: '',\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'scatter',\n        displayModeBar: false,\n      },\n      layout: {\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n        },\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: '\"Lato\", sans-serif',\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n        yaxis: {\n          showgrid: false,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations = new AnnoInfo();\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      (window as (any | {refresh: Function })).refresh = this.doResize.bind(this);\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = window.innerHeight-42;\n      Plotly.redraw(this.graphDiv);\n      try {\n        const event = new CustomEvent('loaded', { detail: window.frameElement.id });\n        window.parent.document.dispatchEvent(event);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, 50);\n\n  onResize() {\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations.clear();\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n      try {\n        const event = new CustomEvent('loaded', { detail: window.frameElement.id });\n        window.parent.document.dispatchEvent(event);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    // Fixed scales\n    if (this.cfg.fixScale) {\n      if ('x' === this.cfg.fixScale) {\n        layout.yaxis.scaleanchor = 'x';\n      } else if ('y' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'y';\n      } else if ('z' === this.cfg.fixScale) {\n        layout.xaxis.scaleanchor = 'z';\n        layout.yaxis.scaleanchor = 'z';\n      }\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis\n      layout.scene = {\n        xaxis: layout.xaxis,\n        yaxis: layout.yaxis,\n        zaxis: layout.zaxis,\n      };\n\n      delete layout.xaxis;\n      delete layout.yaxis;\n      delete layout.zaxis;\n\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n\n      // Check if the X axis should be a date\n      if (!layout.xaxis.type || layout.xaxis.type === 'auto') {\n        const mapping = _.get(this.cfg, 'traces[0].mapping.x');\n        if (mapping && mapping.indexOf('time') >= 0) {\n          layout.xaxis.type = 'date';\n        }\n      }\n\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 50 : 35,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // Set the range to the query window\n      if (isDate && !layout.xaxis.range) {\n        const range = this.timeSrv.timeRange();\n        layout.xaxis.range = [range.from.valueOf(), range.to.valueOf()];\n      }\n\n        layout.font.color = '#5d6c76';\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = 'rgba(93, 108, 118, 0.3)';\n        layout.yaxis.gridcolor = 'rgba(93, 108, 118, 0.3)';\n\n      // Set the second axis\n      layout.yaxis2 = PlotlyPanelCtrl.yaxis2;\n    }\n    return layout;\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      const s = this.cfg.settings;\n\n      const options = {\n        showLink: false,\n        displaylogo: false,\n        displayModeBar: s.displayModeBar,\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n      };\n\n      this.layout = this.getProcessedLayout();\n      this.layout.shapes = this.annotations.shapes;\n      let traces = this.traces;\n      if (this.annotations.shapes.length > 0) {\n        traces = this.traces.concat(this.annotations.trace);\n      }\n      console.log(this.graphDiv, this.graphDiv.emit);\n      Plotly.react(this.graphDiv, traces, this.layout, options);\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const found = data.points[i];\n          const idx = found.pointNumber;\n          const ts = found.fullData.x[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = {from: moment.utc(min), to: moment.utc(max)};\n\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n      try {\n        const event = new CustomEvent('loaded', { detail: window.frameElement.id });\n        window.parent.document.dispatchEvent(event);\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  _hadAnno = false;\n\n  onDataReceived(dataList) {\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    let annotationPromise = Promise.resolve();\n    if (!this.cfg.showAnnotations || this.is3d()) {\n      this.annotations.clear();\n      if (this.layout) {\n        if (this.layout.shapes) {\n          this.onConfigChanged();\n        }\n        this.layout.shapes = [];\n      }\n    } else {\n      annotationPromise = this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          const hasAnno = this.annotations.update(results);\n          if (this.layout) {\n            if (hasAnno !== this._hadAnno) {\n              this.onConfigChanged();\n            }\n            this.layout.shapes = this.annotations.shapes;\n          }\n          this._hadAnno = hasAnno;\n        });\n    }\n\n    // Load the real data changes\n    annotationPromise.then(() => {\n      this._updateTraceData();\n      this.render();\n    });\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        mode: 'markers+lines', // really depends on config settings\n        __set: [], // { key:? property:? }\n      };\n\n      let mode = '';\n      if (config.show.markers) {\n        mode += '+markers';\n        trace.marker = config.settings.marker;\n\n        delete trace.marker.sizemin;\n        delete trace.marker.sizemode;\n        delete trace.marker.sizeref;\n\n        if (config.settings.color_option === 'ramp') {\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\n        } else {\n          delete trace.marker.colorscale;\n          delete trace.marker.showscale;\n        }\n      }\n\n      if (config.show.lines) {\n        mode += '+lines';\n        trace.line = config.settings.line;\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      if (is3D) {\n        this.__addCopyPath(trace, mapping.z, 'z');\n      }\n\n      // Set the trace mode\n      if (mode) {\n        trace.mode = mode.substring(1);\n      }\n      return trace;\n    });\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('NO Series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (this.traces.length !== this.cfg.traces.length) {\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        if (!this.cfg.showAnnotations) {\n          this.annotations.clear();\n        }\n\n        const s = this.cfg.settings;\n        const options = {\n          showLink: false,\n          displaylogo: false,\n          displayModeBar: s.displayModeBar,\n          modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n        };\n        this.layout = this.getProcessedLayout();\n        this.layout.shapes = this.annotations.shapes;\n        let traces = this.traces;\n        if (this.annotations.shapes.length > 0) {\n          traces = this.traces.concat(this.annotations.trace);\n        }\n        Plotly.react(this.graphDiv, traces, this.layout, options);\n        try {\n          const event = new CustomEvent('loaded', { detail: window.frameElement.id });\n          window.parent.document.dispatchEvent(event);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport {PlotlyPanelCtrl} from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    /*this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });*/\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      //console.log('GET Segments:', withRemove, series);\n      //console.log('ALL Series:', this.ctrl.series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape, Data} from 'plotly.js';\n\nexport class AnnoInfo {\n  trace: Data;\n  shapes: Shape[];\n\n  constructor() {\n    this.clear();\n  }\n\n  clear() {\n    this.shapes = [];\n    this.trace = {\n      mode: 'markers',\n      type: 'scatter',\n      hoverinfo: 'x+text',\n      x: [],\n      y: [],\n      text: [],\n      yaxis: 'y2',\n      marker: {\n        size: 15,\n        symbol: 'triangle-up',\n        color: [],\n      },\n    };\n  }\n\n  update(results: any): boolean {\n    if (!results || !results.annotations) {\n      this.clear();\n      return false;\n    }\n\n    const x: number[] = [];\n    const y: number[] = [];\n    const text: string[] = [];\n    const color: string[] = [];\n\n    this.shapes = results.annotations.map(a => {\n      x.push(a.time);\n      y.push(0);\n      text.push('XXXX');\n      color.push(a.annotation.iconColor);\n\n      return {\n        type: 'line', // rect\n        xref: 'x',\n        yref: 'paper',\n        x0: a.time,\n        y0: 0,\n        x1: a.time,\n        y1: 1,\n\n        visible: true,\n        layer: 'above',\n\n        fillcolor: a.annotation.iconColor,\n        opacity: 0.8,\n        line: {\n          color: a.annotation.iconColor,\n          width: 1,\n          dash: 'dash',\n        },\n      } as Shape;\n    });\n\n    // Overwrite it with new points\n    this.trace = {...this.trace, x, y, text};\n    this.trace.marker!.color = color;\n    return x.length > 0;\n  }\n}\n"],"sourceRoot":""}